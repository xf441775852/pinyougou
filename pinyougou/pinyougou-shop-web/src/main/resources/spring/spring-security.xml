<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
			 xmlns:beans="http://www.springframework.org/schema/beans"
			 xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
    
    <!-- 配置不拦截的资源 -->
    <http pattern="/*.html" security="none"/>
    <http pattern="/css/**" security="none"/>
    <http pattern="/js/**" security="none"/>
    <http pattern="/img/**" security="none"/>
    <http pattern="/plugins/**" security="none"/>
    <http pattern="/seller/add.do" security="none"/>

    <!-- 
    	配置具体的规则 
    	auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面
    	use-expressions="false"	是否使用SPEL表达式（没学习过）
    -->
    <http auto-config="true" use-expressions="false">
    	<!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" -->
    	<intercept-url pattern="/**" access="ROLE_USER,ROLE_SELLER"/>


    	
    	<!-- 定义跳转的具体的页面 -->
    	<form-login
    		login-page="/shoplogin.html"
    		login-processing-url="/login.do"
    		default-target-url="/admin/index.html"
    		authentication-failure-url="/shoplogin.html"
			always-use-default-target="true"
    	/>

		<headers>
			<frame-options policy="SAMEORIGIN"/>
		</headers>

    	<!-- 关闭跨域请求 -->
    	<csrf disabled="true"/>
    	
    	<!-- 退出 -->
    	<logout invalidate-session="true" logout-url="/logout.do" logout-success-url="/shoplogin.html" />
    	
	</http>
    
    <!-- 切换成数据库中的用户名和密码 -->
    <authentication-manager>
	<!--定义一个类去实现UserDtailsService接口，@service注解为userService，次配置让security找到实现类去查询数据库-->
    	<authentication-provider user-service-ref="userDetailsService">
    		<!-- 配置加密的方式 -->
		<!-- 在保存用户操作时，将输入的密码进行加密操作 -->
    		<password-encoder ref="passwordEncoder"/>
    	</authentication-provider>
    </authentication-manager>

	<!--认证类-->
	<beans:bean id="userDetailsService" class="com.pinyougou.service.UserDetailsServiceImpl">
		<beans:property name="sellerService" ref="sellerService"></beans:property>
	</beans:bean>

	<!--dubbo服务-->
	<dubbo:application name="pinyougou-shop-web"></dubbo:application>
	<dubbo:registry address="zookeeper://192.168.52.140:2181"></dubbo:registry>
	<dubbo:reference id="sellerService" interface="com.pinyougou.sellergoods.service.SellerService"></dubbo:reference>

    <!-- 配置加密类 -->
    <beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    
    <!-- 提供了入门的方式，在内存中存入用户名和密码 
    <security:authentication-manager>
    	<security:authentication-provider>
    		<security:user-service>
    			<security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/>
    		</security:user-service>
    	</security:authentication-provider>
    </security:authentication-manager>
    -->
</beans:beans>
 
 
 
 
 
 
 
 
 
 
 
 
 